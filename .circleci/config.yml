version: 2.1

jobs:
  save_hello_world_output: #job name
    docker: # it uses the docker executor
      - image: amazon/aws-cli
    steps:
      - run: yum install -y tar
      - run: yum install -y gzip
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: print something
          command: |
            echo "hello world" > ~/output.txt
            cat ~/output.txt
            OldPipelineID=$(cat ~/output.txt)
            echo $OldPipelineID
            echo "$OldPipelineID"
            echo "${OldPipelineID}"
workflows:
  my_workflow:
    jobs:
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
# jobs:
#   smoke_test:
#     docker:
#        - image: alpine:latest
#     steps:
#       - run: apk add --update curl
#       - run:
#           name : smoke test
#           command: |
#                   URL="https://blog.udacity.com/"
#                   if curl -s --head ${URL} # test if blog.udacity. com exists
#                   then
#                   return 0
#                   else
#                   return 1
#                   fi
# workflows:
#   my_workflow:
#     jobs:
#       - smoke_test
      
# jobs:
#   configure_infrastructure:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["76:d3:26:61:52:59:fc:1b:c0:ee:de:51:d7:4c:c4:3f"] 
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible # install the dependencies needed for your playbook


#             export ANSIBLE_HOST_KEY_CHECKING=False
#       - run:
#           name: Configure server
#           command: |
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             ansible-playbook -i inventory.txt playbook.yml

# workflows:
#   my_workflow:
#     jobs:
#       - configure_infrastructure
# commands:
#   destroy_environment:
#       steps:
#       - run:
#           name: Destroy environment
#           command: |
#             aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
#           when: on_fail

# jobs:
#   create_infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Ensure backend infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/template.yml \
#               --stack-name prod-${CIRCLE_WORKFLOW_ID}
#       - run: return 1
#       - destroy_environment
        
# workflows:
#   my_workflow:
#     jobs:
#       - create_infrastructure
# # Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1
# commands:
#   print_pipeline_id:
#     description: "command that prints the pipelineId to the console."
#     steps:
#       - run: echo ${CIRCLE_WORKFLOW_ID}
# # Use a package of configuration called an orb.
# orbs:
#   # Declare a dependency on the welcome-orb
#   welcome: circleci/welcome-orb@0.4.1
# # Orchestrate or schedule a set of jobs
# # jobs:
# #   my_job:
# #     docker:
# #       - image: circleci/node:13.8.0
# #     steps:
# #       - run: return 1
# #       - run:
# #           name: happen on failure
# #           command: echo "Hello Error!"
# #           when: on_fail
#   # myJob:
#   #   docker:
#   #     - image: circleci/node:13.8.0
#   #   steps:
#   #     - print_pipeline_id
#   # save_hello_world_output:
#   #   docker:
#   #     - image: circleci/node:13.8.0
#   #   steps:
#   #     - run: echo "hello world" > ~/output.txt
#   #     - persist_to_workspace:
#   #         root: ~/
#   #         paths:
#   #           - output.txt

#   # print_output_file:
#   #   docker:
#   #     - image: circleci/node:13.8.0
#   #   steps:
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run : cat ~/output.txt
#   # print_hello:
#   #   docker:
#   #     - image: circleci/node:13.8.0
#   #   steps:
#   #     - run: echo hello
#   # print_world:
#   #   docker:
#   #     - image: circleci/node:13.8.0
#   #   steps:
#   #     - run: echo world
#   # build:
#   #   docker:
#   #     - image: circleci/node:13.8.0
#   #   steps:
#   #     - checkout
#   #     - run:
#   #           name: "echo an env var that is part of our project"
#   #           command: |
#   #             echo $MY_ENV_VAR

# workflows:
#   # Name the workflow "welcome"
#   my_workflow:
#     # Run the welcome/run job in its own container
#     jobs:
#       - my_job
#       # - save_hello_world_output
#       # - print_output_file:
#       #     requires:
#       #         - save_hello_world_output
#       # - welcome/run
#       # - print_hello
#       # - print_world:
#       #     requires:
#       #         - print_hello
#       # - build